# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:29:57+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, conint, constr


class ActivationKey(
    RootModel[constr(pattern=r'[A-Z0-9]{5}(-[A-Z0-9]{5}){4}', max_length=29)]
):
    root: constr(pattern=r'[A-Z0-9]{5}(-[A-Z0-9]{5}){4}', max_length=29)


class AgentArn(
    RootModel[
        constr(
            pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):datasync:[a-z\-0-9]+:[0-9]{12}:agent/agent-[0-9a-z]{17}$',
            max_length=128,
        )
    ]
):
    root: constr(
        pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):datasync:[a-z\-0-9]+:[0-9]{12}:agent/agent-[0-9a-z]{17}$',
        max_length=128,
    )


class AgentArnList(RootModel[List[AgentArn]]):
    root: List[AgentArn] = Field(..., max_length=4, min_length=1)


class AgentStatus(Enum):
    ONLINE = 'ONLINE'
    OFFLINE = 'OFFLINE'


class Atime(Enum):
    NONE = 'NONE'
    BEST_EFFORT = 'BEST_EFFORT'


class BytesPerSecond(RootModel[conint(ge=-1)]):
    root: conint(ge=-1)


class CancelTaskExecutionResponse(BaseModel):
    pass


class CreateAgentResponse(BaseModel):
    AgentArn_1: Optional[AgentArn] = Field(None, alias='AgentArn')


class DeleteAgentRequest(BaseModel):
    AgentArn_1: AgentArn = Field(..., alias='AgentArn')


class DeleteAgentResponse(BaseModel):
    pass


class DeleteLocationResponse(BaseModel):
    pass


class DeleteTaskResponse(BaseModel):
    pass


class DescribeAgentRequest(BaseModel):
    AgentArn_1: AgentArn = Field(..., alias='AgentArn')


class Duration(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class Ec2SecurityGroupArn(
    RootModel[
        constr(
            pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):ec2:[a-z\-0-9]*:[0-9]{12}:security-group/.*$',
            max_length=128,
        )
    ]
):
    root: constr(
        pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):ec2:[a-z\-0-9]*:[0-9]{12}:security-group/.*$',
        max_length=128,
    )


class Ec2SecurityGroupArnList(RootModel[List[Ec2SecurityGroupArn]]):
    root: List[Ec2SecurityGroupArn] = Field(..., max_length=5, min_length=1)


class Ec2SubnetArn(
    RootModel[
        constr(
            pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):ec2:[a-z\-0-9]*:[0-9]{12}:subnet/.*$',
            max_length=128,
        )
    ]
):
    root: constr(
        pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):ec2:[a-z\-0-9]*:[0-9]{12}:subnet/.*$',
        max_length=128,
    )


class EfsAccessPointArn(
    RootModel[
        constr(
            pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):elasticfilesystem:[a-z\-0-9]+:[0-9]{12}:access-point/fsap-[0-9a-f]{8,40}$',
            max_length=128,
        )
    ]
):
    root: constr(
        pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):elasticfilesystem:[a-z\-0-9]+:[0-9]{12}:access-point/fsap-[0-9a-f]{8,40}$',
        max_length=128,
    )


class EfsFilesystemArn(
    RootModel[
        constr(
            pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):elasticfilesystem:[a-z\-0-9]*:[0-9]{12}:file-system/fs-.*$',
            max_length=128,
        )
    ]
):
    root: constr(
        pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):elasticfilesystem:[a-z\-0-9]*:[0-9]{12}:file-system/fs-.*$',
        max_length=128,
    )


class EfsInTransitEncryption(Enum):
    NONE = 'NONE'
    TLS1_2 = 'TLS1_2'


class EfsSubdirectory(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_\-\+\./\(\)\p{Zs}]*$', max_length=4096)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_\-\+\./\(\)\p{Zs}]*$', max_length=4096)


class Endpoint(
    RootModel[
        constr(
            pattern=r'\A(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}\z',
            min_length=7,
            max_length=15,
        )
    ]
):
    root: constr(
        pattern=r'\A(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}\z',
        min_length=7,
        max_length=15,
    )


class EndpointType(Enum):
    PUBLIC = 'PUBLIC'
    PRIVATE_LINK = 'PRIVATE_LINK'
    FIPS = 'FIPS'


class FilterAttributeValue(
    RootModel[
        constr(pattern=r'^[0-9a-zA-Z_\ \-\:\*\.\\/\?-]*$', min_length=1, max_length=255)
    ]
):
    root: constr(
        pattern=r'^[0-9a-zA-Z_\ \-\:\*\.\\/\?-]*$', min_length=1, max_length=255
    )


class FilterType(Enum):
    SIMPLE_PATTERN = 'SIMPLE_PATTERN'


class FilterValue(RootModel[constr(pattern=r'^[^\x00]+$', max_length=102400)]):
    root: constr(pattern=r'^[^\x00]+$', max_length=102400)


class FilterValues(RootModel[List[FilterAttributeValue]]):
    root: List[FilterAttributeValue]


class FsxFilesystemArn(
    RootModel[
        constr(
            pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):fsx:[a-z\-0-9]*:[0-9]{12}:file-system/fs-.*$',
            max_length=128,
        )
    ]
):
    root: constr(
        pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):fsx:[a-z\-0-9]*:[0-9]{12}:file-system/fs-.*$',
        max_length=128,
    )


class FsxLustreSubdirectory(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_\-\+\./\(\)\$\p{Zs}]+$', max_length=4096)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_\-\+\./\(\)\$\p{Zs}]+$', max_length=4096)


class FsxOntapSubdirectory(
    RootModel[
        constr(pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{1,255}$', max_length=255)
    ]
):
    root: constr(pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{1,255}$', max_length=255)


class FsxOpenZfsSubdirectory(
    RootModel[
        constr(pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{1,4096}$', max_length=4096)
    ]
):
    root: constr(pattern=r'^[^\u0000\u0085\u2028\u2029\r\n]{1,4096}$', max_length=4096)


class FsxWindowsSubdirectory(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_\-\+\./\(\)\$\p{Zs}]+$', max_length=4096)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_\-\+\./\(\)\$\p{Zs}]+$', max_length=4096)


class Gid(Enum):
    NONE = 'NONE'
    INT_VALUE = 'INT_VALUE'
    NAME = 'NAME'
    BOTH = 'BOTH'


class HdfsAuthenticationType(Enum):
    SIMPLE = 'SIMPLE'
    KERBEROS = 'KERBEROS'


class HdfsBlockSize(RootModel[conint(ge=1048576, le=1073741824)]):
    root: conint(ge=1048576, le=1073741824)


class HdfsDataTransferProtection(Enum):
    DISABLED = 'DISABLED'
    AUTHENTICATION = 'AUTHENTICATION'
    INTEGRITY = 'INTEGRITY'
    PRIVACY = 'PRIVACY'


class HdfsReplicationFactor(RootModel[conint(ge=1, le=512)]):
    root: conint(ge=1, le=512)


class HdfsRpcProtection(Enum):
    DISABLED = 'DISABLED'
    AUTHENTICATION = 'AUTHENTICATION'
    INTEGRITY = 'INTEGRITY'
    PRIVACY = 'PRIVACY'


class HdfsServerHostname(
    RootModel[
        constr(
            pattern=r'^(([a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9\-]*[A-Za-z0-9])$',
            min_length=1,
            max_length=255,
        )
    ]
):
    root: constr(
        pattern=r'^(([a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9\-]*[A-Za-z0-9])$',
        min_length=1,
        max_length=255,
    )


class HdfsServerPort(RootModel[conint(ge=1, le=65536)]):
    root: conint(ge=1, le=65536)


class HdfsSubdirectory(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_\-\+\./\(\)\$\p{Zs}]+$', max_length=4096)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_\-\+\./\(\)\$\p{Zs}]+$', max_length=4096)


class HdfsUser(
    RootModel[
        constr(pattern=r'^[_.A-Za-z0-9][-_.A-Za-z0-9]*$', min_length=1, max_length=256)
    ]
):
    root: constr(
        pattern=r'^[_.A-Za-z0-9][-_.A-Za-z0-9]*$', min_length=1, max_length=256
    )


class IamRoleArn(
    RootModel[
        constr(
            pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):iam::[0-9]{12}:role/.*$',
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):iam::[0-9]{12}:role/.*$',
        max_length=2048,
    )


class InternalException(RootModel[Any]):
    root: Any


class InvalidRequestException(RootModel[Any]):
    root: Any


class KerberosKeytabFile(RootModel[constr(max_length=65536)]):
    root: constr(max_length=65536)


class KerberosKrb5ConfFile(RootModel[constr(max_length=131072)]):
    root: constr(max_length=131072)


class KerberosPrincipal(
    RootModel[constr(pattern=r'^.+$', min_length=1, max_length=256)]
):
    root: constr(pattern=r'^.+$', min_length=1, max_length=256)


class KmsKeyProviderUri(
    RootModel[
        constr(
            pattern=r'^kms:\/\/http[s]?@(([a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9\-]*[A-Za-z0-9])(;(([a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9\-]*[A-Za-z0-9]))*:[0-9]{1,5}\/kms$',
            min_length=1,
            max_length=255,
        )
    ]
):
    root: constr(
        pattern=r'^kms:\/\/http[s]?@(([a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9\-]*[A-Za-z0-9])(;(([a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9\-]*[A-Za-z0-9]))*:[0-9]{1,5}\/kms$',
        min_length=1,
        max_length=255,
    )


class LocationArn(
    RootModel[
        constr(
            pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):datasync:[a-z\-0-9]+:[0-9]{12}:location/loc-[0-9a-z]{17}$',
            max_length=128,
        )
    ]
):
    root: constr(
        pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):datasync:[a-z\-0-9]+:[0-9]{12}:location/loc-[0-9a-z]{17}$',
        max_length=128,
    )


class LocationFilterName(Enum):
    LocationUri = 'LocationUri'
    LocationType = 'LocationType'
    CreationTime = 'CreationTime'


class LocationUri(
    RootModel[
        constr(
            pattern=r'^(efs|nfs|s3|smb|hdfs|fsx[a-z0-9-]+)://[a-zA-Z0-9.:/\-]+$',
            max_length=4360,
        )
    ]
):
    root: constr(
        pattern=r'^(efs|nfs|s3|smb|hdfs|fsx[a-z0-9-]+)://[a-zA-Z0-9.:/\-]+$',
        max_length=4360,
    )


class LogGroupArn(
    RootModel[
        constr(
            pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):logs:[a-z\-0-9]*:[0-9]{12}:log-group:([^:\*]*)(:\*)?$',
            max_length=562,
        )
    ]
):
    root: constr(
        pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):logs:[a-z\-0-9]*:[0-9]{12}:log-group:([^:\*]*)(:\*)?$',
        max_length=562,
    )


class LogLevel(Enum):
    OFF = 'OFF'
    BASIC = 'BASIC'
    TRANSFER = 'TRANSFER'


class MaxResults(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class Mtime(Enum):
    NONE = 'NONE'
    PRESERVE = 'PRESERVE'


class NetworkInterfaceArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[\-a-z]{0,}:ec2:[a-z\-0-9]*:[0-9]{12}:network-interface/eni-[0-9a-f]+$',
            max_length=128,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[\-a-z]{0,}:ec2:[a-z\-0-9]*:[0-9]{12}:network-interface/eni-[0-9a-f]+$',
        max_length=128,
    )


class NextToken(RootModel[constr(pattern=r'[a-zA-Z0-9=_-]+', max_length=65535)]):
    root: constr(pattern=r'[a-zA-Z0-9=_-]+', max_length=65535)


class NfsSubdirectory(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_\-\+\./\(\)\p{Zs}]+$', max_length=4096)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_\-\+\./\(\)\p{Zs}]+$', max_length=4096)


class NfsVersion(Enum):
    AUTOMATIC = 'AUTOMATIC'
    NFS3 = 'NFS3'
    NFS4_0 = 'NFS4_0'
    NFS4_1 = 'NFS4_1'


class ObjectStorageAccessKey(
    RootModel[constr(pattern=r'^.+$', min_length=1, max_length=200)]
):
    root: constr(pattern=r'^.+$', min_length=1, max_length=200)


class ObjectStorageBucketName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9_\-\+\./\(\)\$\p{Zs}]+$', min_length=3, max_length=63
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9_\-\+\./\(\)\$\p{Zs}]+$', min_length=3, max_length=63
    )


class ObjectStorageCertificate(RootModel[constr(max_length=32768)]):
    root: constr(max_length=32768)


class ObjectStorageSecretKey(RootModel[SecretStr]):
    root: SecretStr


class ObjectStorageServerPort(RootModel[conint(ge=1, le=65536)]):
    root: conint(ge=1, le=65536)


class ObjectStorageServerProtocol(Enum):
    HTTPS = 'HTTPS'
    HTTP = 'HTTP'


class ObjectTags(Enum):
    PRESERVE = 'PRESERVE'
    NONE = 'NONE'


class OnPremConfig(BaseModel):
    AgentArns: AgentArnList


class Operator(Enum):
    Equals = 'Equals'
    NotEquals = 'NotEquals'
    In = 'In'
    LessThanOrEqual = 'LessThanOrEqual'
    LessThan = 'LessThan'
    GreaterThanOrEqual = 'GreaterThanOrEqual'
    GreaterThan = 'GreaterThan'
    Contains = 'Contains'
    NotContains = 'NotContains'
    BeginsWith = 'BeginsWith'


class OverwriteMode(Enum):
    ALWAYS = 'ALWAYS'
    NEVER = 'NEVER'


class PLSecurityGroupArnList(RootModel[List[Ec2SecurityGroupArn]]):
    root: List[Ec2SecurityGroupArn] = Field(..., max_length=1, min_length=1)


class PLSubnetArnList(RootModel[List[Ec2SubnetArn]]):
    root: List[Ec2SubnetArn] = Field(..., max_length=1, min_length=1)


class PhaseStatus(Enum):
    PENDING = 'PENDING'
    SUCCESS = 'SUCCESS'
    ERROR = 'ERROR'


class PosixPermissions(Enum):
    NONE = 'NONE'
    PRESERVE = 'PRESERVE'


class PreserveDeletedFiles(Enum):
    PRESERVE = 'PRESERVE'
    REMOVE = 'REMOVE'


class PreserveDevices(Enum):
    NONE = 'NONE'
    PRESERVE = 'PRESERVE'


class QopConfiguration(BaseModel):
    DataTransferProtection: Optional[HdfsDataTransferProtection] = None
    RpcProtection: Optional[HdfsRpcProtection] = None


class S3BucketArn(
    RootModel[
        constr(
            pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):(s3|s3-outposts):[a-z\-0-9]*:[0-9]*:.*$',
            max_length=156,
        )
    ]
):
    root: constr(
        pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):(s3|s3-outposts):[a-z\-0-9]*:[0-9]*:.*$',
        max_length=156,
    )


class S3Config(BaseModel):
    BucketAccessRoleArn: IamRoleArn


class S3StorageClass(Enum):
    STANDARD = 'STANDARD'
    STANDARD_IA = 'STANDARD_IA'
    ONEZONE_IA = 'ONEZONE_IA'
    INTELLIGENT_TIERING = 'INTELLIGENT_TIERING'
    GLACIER = 'GLACIER'
    DEEP_ARCHIVE = 'DEEP_ARCHIVE'
    OUTPOSTS = 'OUTPOSTS'
    GLACIER_INSTANT_RETRIEVAL = 'GLACIER_INSTANT_RETRIEVAL'


class S3Subdirectory(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_\-\+\./\(\)\p{Zs}]*$', max_length=4096)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_\-\+\./\(\)\p{Zs}]*$', max_length=4096)


class ScheduleExpressionCron(
    RootModel[
        constr(pattern=r'^[a-zA-Z0-9\ \_\*\?\,\|\^\-\/\#\s\(\)\+]*$', max_length=256)
    ]
):
    root: constr(pattern=r'^[a-zA-Z0-9\ \_\*\?\,\|\^\-\/\#\s\(\)\+]*$', max_length=256)


class ServerHostname(
    RootModel[
        constr(
            pattern=r'^(([a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9\-]*[A-Za-z0-9])$',
            max_length=255,
        )
    ]
):
    root: constr(
        pattern=r'^(([a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9\-]*[A-Za-z0-9])$',
        max_length=255,
    )


class SmbDomain(
    RootModel[
        constr(pattern=r'^[A-Za-z0-9]((\.|-+)?[A-Za-z0-9]){0,252}$', max_length=253)
    ]
):
    root: constr(pattern=r'^[A-Za-z0-9]((\.|-+)?[A-Za-z0-9]){0,252}$', max_length=253)


class SmbPassword(RootModel[SecretStr]):
    root: SecretStr


class SmbSecurityDescriptorCopyFlags(Enum):
    NONE = 'NONE'
    OWNER_DACL = 'OWNER_DACL'
    OWNER_DACL_SACL = 'OWNER_DACL_SACL'


class SmbSubdirectory(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_\-\+\./\(\)\$\p{Zs}]+$', max_length=4096)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_\-\+\./\(\)\$\p{Zs}]+$', max_length=4096)


class SmbUser(
    RootModel[constr(pattern=r'^[^\x5B\x5D\\/:;|=,+*?]{1,104}$', max_length=104)]
):
    root: constr(pattern=r'^[^\x5B\x5D\\/:;|=,+*?]{1,104}$', max_length=104)


class SmbVersion(Enum):
    AUTOMATIC = 'AUTOMATIC'
    SMB2 = 'SMB2'
    SMB3 = 'SMB3'
    SMB1 = 'SMB1'
    SMB2_0 = 'SMB2_0'


class SourceNetworkInterfaceArns(RootModel[List[NetworkInterfaceArn]]):
    root: List[NetworkInterfaceArn]


class StorageVirtualMachineArn(
    RootModel[
        constr(
            pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):fsx:[a-z\-0-9]+:[0-9]{12}:storage-virtual-machine/fs-[0-9a-f]+/svm-[0-9a-f]{17,}$',
            max_length=162,
        )
    ]
):
    root: constr(
        pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):fsx:[a-z\-0-9]+:[0-9]{12}:storage-virtual-machine/fs-[0-9a-f]+/svm-[0-9a-f]{17,}$',
        max_length=162,
    )


class TagKey(
    RootModel[constr(pattern=r'^[a-zA-Z0-9\s+=._:/-]+$', min_length=1, max_length=256)]
):
    root: constr(pattern=r'^[a-zA-Z0-9\s+=._:/-]+$', min_length=1, max_length=256)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class TagResourceResponse(BaseModel):
    pass


class TagValue(
    RootModel[constr(pattern=r'^[a-zA-Z0-9\s+=._:@/-]+$', min_length=1, max_length=256)]
):
    root: constr(pattern=r'^[a-zA-Z0-9\s+=._:@/-]+$', min_length=1, max_length=256)


class TaggableResourceArn(
    RootModel[
        constr(
            pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):datasync:[a-z\-0-9]+:[0-9]{12}:(agent|task|location)/(agent|task|loc)-[a-f0-9]{17}(/execution/exec-[a-f0-9]{17})?$',
            max_length=128,
        )
    ]
):
    root: constr(
        pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):datasync:[a-z\-0-9]+:[0-9]{12}:(agent|task|location)/(agent|task|loc)-[a-f0-9]{17}(/execution/exec-[a-f0-9]{17})?$',
        max_length=128,
    )


class TaskArn(
    RootModel[
        constr(
            pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):datasync:[a-z\-0-9]*:[0-9]{12}:task/task-[0-9a-f]{17}$',
            max_length=128,
        )
    ]
):
    root: constr(
        pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):datasync:[a-z\-0-9]*:[0-9]{12}:task/task-[0-9a-f]{17}$',
        max_length=128,
    )


class TaskExecutionArn(
    RootModel[
        constr(
            pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):datasync:[a-z\-0-9]*:[0-9]{12}:task/task-[0-9a-f]{17}/execution/exec-[0-9a-f]{17}$',
            max_length=128,
        )
    ]
):
    root: constr(
        pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):datasync:[a-z\-0-9]*:[0-9]{12}:task/task-[0-9a-f]{17}/execution/exec-[0-9a-f]{17}$',
        max_length=128,
    )


class TaskExecutionStatus(Enum):
    QUEUED = 'QUEUED'
    LAUNCHING = 'LAUNCHING'
    PREPARING = 'PREPARING'
    TRANSFERRING = 'TRANSFERRING'
    VERIFYING = 'VERIFYING'
    SUCCESS = 'SUCCESS'
    ERROR = 'ERROR'


class TaskFilterName(Enum):
    LocationId = 'LocationId'
    CreationTime = 'CreationTime'


class TaskQueueing(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class TaskSchedule(BaseModel):
    ScheduleExpression: ScheduleExpressionCron


class TaskStatus(Enum):
    AVAILABLE = 'AVAILABLE'
    CREATING = 'CREATING'
    QUEUED = 'QUEUED'
    RUNNING = 'RUNNING'
    UNAVAILABLE = 'UNAVAILABLE'


class Time(RootModel[datetime]):
    root: datetime


class TransferMode(Enum):
    CHANGED = 'CHANGED'
    ALL = 'ALL'


class Uid(Enum):
    NONE = 'NONE'
    INT_VALUE = 'INT_VALUE'
    NAME = 'NAME'
    BOTH = 'BOTH'


class UntagResourceRequest(BaseModel):
    Keys: TagKeyList
    ResourceArn: TaggableResourceArn


class UntagResourceResponse(BaseModel):
    pass


class UpdateAgentRequest(BaseModel):
    AgentArn_1: AgentArn = Field(..., alias='AgentArn')
    Name: Optional[TagValue] = None


class UpdateAgentResponse(BaseModel):
    pass


class UpdateLocationHdfsResponse(BaseModel):
    pass


class UpdateLocationNfsResponse(BaseModel):
    pass


class UpdateLocationObjectStorageRequest(BaseModel):
    AccessKey: Optional[ObjectStorageAccessKey] = None
    AgentArns: Optional[AgentArnList] = None
    LocationArn_1: LocationArn = Field(..., alias='LocationArn')
    SecretKey: Optional[ObjectStorageSecretKey] = None
    ServerCertificate: Optional[ObjectStorageCertificate] = None
    ServerPort: Optional[ObjectStorageServerPort] = None
    ServerProtocol: Optional[ObjectStorageServerProtocol] = None
    Subdirectory: Optional[S3Subdirectory] = None


class UpdateLocationObjectStorageResponse(BaseModel):
    pass


class UpdateLocationSmbResponse(BaseModel):
    pass


class UpdateTaskExecutionResponse(BaseModel):
    pass


class UpdateTaskResponse(BaseModel):
    pass


class VerifyMode(Enum):
    POINT_IN_TIME_CONSISTENT = 'POINT_IN_TIME_CONSISTENT'
    ONLY_FILES_TRANSFERRED = 'ONLY_FILES_TRANSFERRED'
    NONE = 'NONE'


class VpcEndpointId(RootModel[constr(pattern=r'^vpce-[0-9a-f]{17}$')]):
    root: constr(pattern=r'^vpce-[0-9a-f]{17}$')


class Long(RootModel[int]):
    root: int


class String(RootModel[str]):
    root: str


class XAmzTarget(Enum):
    FmrsService_CancelTaskExecution = 'FmrsService.CancelTaskExecution'


class XAmzTarget1(Enum):
    FmrsService_CreateAgent = 'FmrsService.CreateAgent'


class XAmzTarget2(Enum):
    FmrsService_CreateLocationEfs = 'FmrsService.CreateLocationEfs'


class XAmzTarget3(Enum):
    FmrsService_CreateLocationFsxLustre = 'FmrsService.CreateLocationFsxLustre'


class XAmzTarget4(Enum):
    FmrsService_CreateLocationFsxOntap = 'FmrsService.CreateLocationFsxOntap'


class XAmzTarget5(Enum):
    FmrsService_CreateLocationFsxOpenZfs = 'FmrsService.CreateLocationFsxOpenZfs'


class XAmzTarget6(Enum):
    FmrsService_CreateLocationFsxWindows = 'FmrsService.CreateLocationFsxWindows'


class XAmzTarget7(Enum):
    FmrsService_CreateLocationHdfs = 'FmrsService.CreateLocationHdfs'


class XAmzTarget8(Enum):
    FmrsService_CreateLocationNfs = 'FmrsService.CreateLocationNfs'


class XAmzTarget9(Enum):
    FmrsService_CreateLocationObjectStorage = 'FmrsService.CreateLocationObjectStorage'


class XAmzTarget10(Enum):
    FmrsService_CreateLocationS3 = 'FmrsService.CreateLocationS3'


class XAmzTarget11(Enum):
    FmrsService_CreateLocationSmb = 'FmrsService.CreateLocationSmb'


class XAmzTarget12(Enum):
    FmrsService_CreateTask = 'FmrsService.CreateTask'


class XAmzTarget13(Enum):
    FmrsService_DeleteAgent = 'FmrsService.DeleteAgent'


class XAmzTarget14(Enum):
    FmrsService_DeleteLocation = 'FmrsService.DeleteLocation'


class XAmzTarget15(Enum):
    FmrsService_DeleteTask = 'FmrsService.DeleteTask'


class XAmzTarget16(Enum):
    FmrsService_DescribeAgent = 'FmrsService.DescribeAgent'


class XAmzTarget17(Enum):
    FmrsService_DescribeLocationEfs = 'FmrsService.DescribeLocationEfs'


class XAmzTarget18(Enum):
    FmrsService_DescribeLocationFsxLustre = 'FmrsService.DescribeLocationFsxLustre'


class XAmzTarget19(Enum):
    FmrsService_DescribeLocationFsxOntap = 'FmrsService.DescribeLocationFsxOntap'


class XAmzTarget20(Enum):
    FmrsService_DescribeLocationFsxOpenZfs = 'FmrsService.DescribeLocationFsxOpenZfs'


class XAmzTarget21(Enum):
    FmrsService_DescribeLocationFsxWindows = 'FmrsService.DescribeLocationFsxWindows'


class XAmzTarget22(Enum):
    FmrsService_DescribeLocationHdfs = 'FmrsService.DescribeLocationHdfs'


class XAmzTarget23(Enum):
    FmrsService_DescribeLocationNfs = 'FmrsService.DescribeLocationNfs'


class XAmzTarget24(Enum):
    FmrsService_DescribeLocationObjectStorage = (
        'FmrsService.DescribeLocationObjectStorage'
    )


class XAmzTarget25(Enum):
    FmrsService_DescribeLocationS3 = 'FmrsService.DescribeLocationS3'


class XAmzTarget26(Enum):
    FmrsService_DescribeLocationSmb = 'FmrsService.DescribeLocationSmb'


class XAmzTarget27(Enum):
    FmrsService_DescribeTask = 'FmrsService.DescribeTask'


class XAmzTarget28(Enum):
    FmrsService_DescribeTaskExecution = 'FmrsService.DescribeTaskExecution'


class XAmzTarget29(Enum):
    FmrsService_ListAgents = 'FmrsService.ListAgents'


class XAmzTarget30(Enum):
    FmrsService_ListLocations = 'FmrsService.ListLocations'


class XAmzTarget31(Enum):
    FmrsService_ListTagsForResource = 'FmrsService.ListTagsForResource'


class XAmzTarget32(Enum):
    FmrsService_ListTaskExecutions = 'FmrsService.ListTaskExecutions'


class XAmzTarget33(Enum):
    FmrsService_ListTasks = 'FmrsService.ListTasks'


class XAmzTarget34(Enum):
    FmrsService_StartTaskExecution = 'FmrsService.StartTaskExecution'


class XAmzTarget35(Enum):
    FmrsService_TagResource = 'FmrsService.TagResource'


class XAmzTarget36(Enum):
    FmrsService_UntagResource = 'FmrsService.UntagResource'


class XAmzTarget37(Enum):
    FmrsService_UpdateAgent = 'FmrsService.UpdateAgent'


class XAmzTarget38(Enum):
    FmrsService_UpdateLocationHdfs = 'FmrsService.UpdateLocationHdfs'


class XAmzTarget39(Enum):
    FmrsService_UpdateLocationNfs = 'FmrsService.UpdateLocationNfs'


class XAmzTarget40(Enum):
    FmrsService_UpdateLocationObjectStorage = 'FmrsService.UpdateLocationObjectStorage'


class XAmzTarget41(Enum):
    FmrsService_UpdateLocationSmb = 'FmrsService.UpdateLocationSmb'


class XAmzTarget42(Enum):
    FmrsService_UpdateTask = 'FmrsService.UpdateTask'


class XAmzTarget43(Enum):
    FmrsService_UpdateTaskExecution = 'FmrsService.UpdateTaskExecution'


class AgentListEntry(BaseModel):
    AgentArn_1: Optional[AgentArn] = Field(None, alias='AgentArn')
    Name: Optional[TagValue] = None
    Status: Optional[AgentStatus] = None


class CancelTaskExecutionRequest(BaseModel):
    TaskExecutionArn_1: TaskExecutionArn = Field(..., alias='TaskExecutionArn')


class CreateLocationEfsResponse(BaseModel):
    LocationArn_1: Optional[LocationArn] = Field(None, alias='LocationArn')


class CreateLocationFsxLustreResponse(BaseModel):
    LocationArn_1: Optional[LocationArn] = Field(None, alias='LocationArn')


class CreateLocationFsxOntapResponse(BaseModel):
    LocationArn_1: Optional[LocationArn] = Field(None, alias='LocationArn')


class CreateLocationFsxOpenZfsResponse(BaseModel):
    LocationArn_1: Optional[LocationArn] = Field(None, alias='LocationArn')


class CreateLocationFsxWindowsResponse(BaseModel):
    LocationArn_1: Optional[LocationArn] = Field(None, alias='LocationArn')


class CreateLocationHdfsResponse(BaseModel):
    LocationArn_1: Optional[LocationArn] = Field(None, alias='LocationArn')


class CreateLocationNfsResponse(BaseModel):
    LocationArn_1: Optional[LocationArn] = Field(None, alias='LocationArn')


class CreateLocationObjectStorageResponse(BaseModel):
    LocationArn_1: Optional[LocationArn] = Field(None, alias='LocationArn')


class CreateLocationS3Response(BaseModel):
    LocationArn_1: Optional[LocationArn] = Field(None, alias='LocationArn')


class CreateLocationSmbResponse(BaseModel):
    LocationArn_1: Optional[LocationArn] = Field(None, alias='LocationArn')


class CreateTaskResponse(BaseModel):
    TaskArn_1: Optional[TaskArn] = Field(None, alias='TaskArn')


class DeleteLocationRequest(BaseModel):
    LocationArn_1: LocationArn = Field(..., alias='LocationArn')


class DeleteTaskRequest(BaseModel):
    TaskArn_1: TaskArn = Field(..., alias='TaskArn')


class DescribeLocationEfsRequest(BaseModel):
    LocationArn_1: LocationArn = Field(..., alias='LocationArn')


class DescribeLocationFsxLustreRequest(BaseModel):
    LocationArn_1: LocationArn = Field(..., alias='LocationArn')


class DescribeLocationFsxLustreResponse(BaseModel):
    CreationTime: Optional[Time] = None
    LocationArn_1: Optional[LocationArn] = Field(None, alias='LocationArn')
    LocationUri_1: Optional[LocationUri] = Field(None, alias='LocationUri')
    SecurityGroupArns: Optional[Ec2SecurityGroupArnList] = None


class DescribeLocationFsxOntapRequest(BaseModel):
    LocationArn_1: LocationArn = Field(..., alias='LocationArn')


class DescribeLocationFsxOpenZfsRequest(BaseModel):
    LocationArn_1: LocationArn = Field(..., alias='LocationArn')


class DescribeLocationFsxWindowsRequest(BaseModel):
    LocationArn_1: LocationArn = Field(..., alias='LocationArn')


class DescribeLocationFsxWindowsResponse(BaseModel):
    CreationTime: Optional[Time] = None
    Domain: Optional[SmbDomain] = None
    LocationArn_1: Optional[LocationArn] = Field(None, alias='LocationArn')
    LocationUri_1: Optional[LocationUri] = Field(None, alias='LocationUri')
    SecurityGroupArns: Optional[Ec2SecurityGroupArnList] = None
    User: Optional[SmbUser] = None


class DescribeLocationHdfsRequest(BaseModel):
    LocationArn_1: LocationArn = Field(..., alias='LocationArn')


class DescribeLocationNfsRequest(BaseModel):
    LocationArn_1: LocationArn = Field(..., alias='LocationArn')


class DescribeLocationObjectStorageRequest(BaseModel):
    LocationArn_1: LocationArn = Field(..., alias='LocationArn')


class DescribeLocationObjectStorageResponse(BaseModel):
    AccessKey: Optional[ObjectStorageAccessKey] = None
    AgentArns: Optional[AgentArnList] = None
    CreationTime: Optional[Time] = None
    LocationArn_1: Optional[LocationArn] = Field(None, alias='LocationArn')
    LocationUri_1: Optional[LocationUri] = Field(None, alias='LocationUri')
    ServerCertificate: Optional[ObjectStorageCertificate] = None
    ServerPort: Optional[ObjectStorageServerPort] = None
    ServerProtocol: Optional[ObjectStorageServerProtocol] = None


class DescribeLocationS3Request(BaseModel):
    LocationArn_1: LocationArn = Field(..., alias='LocationArn')


class DescribeLocationS3Response(BaseModel):
    AgentArns: Optional[AgentArnList] = None
    CreationTime: Optional[Time] = None
    LocationArn_1: Optional[LocationArn] = Field(None, alias='LocationArn')
    LocationUri_1: Optional[LocationUri] = Field(None, alias='LocationUri')
    S3Config_1: Optional[S3Config] = Field(None, alias='S3Config')
    S3StorageClass_1: Optional[S3StorageClass] = Field(None, alias='S3StorageClass')


class DescribeLocationSmbRequest(BaseModel):
    LocationArn_1: LocationArn = Field(..., alias='LocationArn')


class DescribeTaskExecutionRequest(BaseModel):
    TaskExecutionArn_1: TaskExecutionArn = Field(..., alias='TaskExecutionArn')


class DescribeTaskRequest(BaseModel):
    TaskArn_1: TaskArn = Field(..., alias='TaskArn')


class DestinationNetworkInterfaceArns(RootModel[List[NetworkInterfaceArn]]):
    root: List[NetworkInterfaceArn]


class Ec2Config(BaseModel):
    SecurityGroupArns: Ec2SecurityGroupArnList
    SubnetArn: Ec2SubnetArn


class FilterRule(BaseModel):
    FilterType_1: Optional[FilterType] = Field(None, alias='FilterType')
    Value: Optional[FilterValue] = None


class HdfsNameNode(BaseModel):
    Hostname: HdfsServerHostname
    Port: HdfsServerPort


class HdfsNameNodeList(RootModel[List[HdfsNameNode]]):
    root: List[HdfsNameNode] = Field(..., min_length=1)


class ListAgentsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListTagsForResourceRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResourceArn: TaggableResourceArn


class ListTaskExecutionsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TaskArn_1: Optional[TaskArn] = Field(None, alias='TaskArn')


class LocationFilter(BaseModel):
    Name: LocationFilterName
    Operator_1: Operator = Field(..., alias='Operator')
    Values: FilterValues


class LocationFilters(RootModel[List[LocationFilter]]):
    root: List[LocationFilter]


class LocationListEntry(BaseModel):
    LocationArn_1: Optional[LocationArn] = Field(None, alias='LocationArn')
    LocationUri_1: Optional[LocationUri] = Field(None, alias='LocationUri')


class NfsMountOptions(BaseModel):
    Version: Optional[NfsVersion] = None


class Options(BaseModel):
    Atime_1: Optional[Atime] = Field(None, alias='Atime')
    BytesPerSecond_1: Optional[BytesPerSecond] = Field(None, alias='BytesPerSecond')
    Gid_1: Optional[Gid] = Field(None, alias='Gid')
    LogLevel_1: Optional[LogLevel] = Field(None, alias='LogLevel')
    Mtime_1: Optional[Mtime] = Field(None, alias='Mtime')
    ObjectTags_1: Optional[ObjectTags] = Field(None, alias='ObjectTags')
    OverwriteMode_1: Optional[OverwriteMode] = Field(None, alias='OverwriteMode')
    PosixPermissions_1: Optional[PosixPermissions] = Field(
        None, alias='PosixPermissions'
    )
    PreserveDeletedFiles_1: Optional[PreserveDeletedFiles] = Field(
        None, alias='PreserveDeletedFiles'
    )
    PreserveDevices_1: Optional[PreserveDevices] = Field(None, alias='PreserveDevices')
    SecurityDescriptorCopyFlags: Optional[SmbSecurityDescriptorCopyFlags] = None
    TaskQueueing_1: Optional[TaskQueueing] = Field(None, alias='TaskQueueing')
    TransferMode_1: Optional[TransferMode] = Field(None, alias='TransferMode')
    Uid_1: Optional[Uid] = Field(None, alias='Uid')
    VerifyMode_1: Optional[VerifyMode] = Field(None, alias='VerifyMode')


class PrivateLinkConfig(BaseModel):
    PrivateLinkEndpoint: Optional[Endpoint] = None
    SecurityGroupArns: Optional[PLSecurityGroupArnList] = None
    SubnetArns: Optional[PLSubnetArnList] = None
    VpcEndpointId_1: Optional[VpcEndpointId] = Field(None, alias='VpcEndpointId')


class SmbMountOptions(BaseModel):
    Version: Optional[SmbVersion] = None


class StartTaskExecutionResponse(BaseModel):
    TaskExecutionArn_1: Optional[TaskExecutionArn] = Field(
        None, alias='TaskExecutionArn'
    )


class TagListEntry(BaseModel):
    Key: TagKey
    Value: Optional[TagValue] = None


class TaskExecutionListEntry(BaseModel):
    Status: Optional[TaskExecutionStatus] = None
    TaskExecutionArn_1: Optional[TaskExecutionArn] = Field(
        None, alias='TaskExecutionArn'
    )


class TaskExecutionResultDetail(BaseModel):
    ErrorCode: Optional[String] = None
    ErrorDetail: Optional[String] = None
    PrepareDuration: Optional[Duration] = None
    PrepareStatus: Optional[PhaseStatus] = None
    TotalDuration: Optional[Duration] = None
    TransferDuration: Optional[Duration] = None
    TransferStatus: Optional[PhaseStatus] = None
    VerifyDuration: Optional[Duration] = None
    VerifyStatus: Optional[PhaseStatus] = None


class TaskFilter(BaseModel):
    Name: TaskFilterName
    Operator_1: Operator = Field(..., alias='Operator')
    Values: FilterValues


class TaskFilters(RootModel[List[TaskFilter]]):
    root: List[TaskFilter]


class TaskListEntry(BaseModel):
    Name: Optional[TagValue] = None
    Status: Optional[TaskStatus] = None
    TaskArn_1: Optional[TaskArn] = Field(None, alias='TaskArn')


class UpdateLocationHdfsRequest(BaseModel):
    AgentArns: Optional[AgentArnList] = None
    AuthenticationType: Optional[HdfsAuthenticationType] = None
    BlockSize: Optional[HdfsBlockSize] = None
    KerberosKeytab: Optional[KerberosKeytabFile] = None
    KerberosKrb5Conf: Optional[KerberosKrb5ConfFile] = None
    KerberosPrincipal_1: Optional[KerberosPrincipal] = Field(
        None, alias='KerberosPrincipal'
    )
    KmsKeyProviderUri_1: Optional[KmsKeyProviderUri] = Field(
        None, alias='KmsKeyProviderUri'
    )
    LocationArn_1: LocationArn = Field(..., alias='LocationArn')
    NameNodes: Optional[HdfsNameNodeList] = None
    QopConfiguration_1: Optional[QopConfiguration] = Field(
        None, alias='QopConfiguration'
    )
    ReplicationFactor: Optional[HdfsReplicationFactor] = None
    SimpleUser: Optional[HdfsUser] = None
    Subdirectory: Optional[HdfsSubdirectory] = None


class UpdateLocationNfsRequest(BaseModel):
    LocationArn_1: LocationArn = Field(..., alias='LocationArn')
    MountOptions: Optional[NfsMountOptions] = None
    OnPremConfig_1: Optional[OnPremConfig] = Field(None, alias='OnPremConfig')
    Subdirectory: Optional[NfsSubdirectory] = None


class UpdateLocationSmbRequest(BaseModel):
    AgentArns: Optional[AgentArnList] = None
    Domain: Optional[SmbDomain] = None
    LocationArn_1: LocationArn = Field(..., alias='LocationArn')
    MountOptions: Optional[SmbMountOptions] = None
    Password: Optional[SmbPassword] = None
    Subdirectory: Optional[SmbSubdirectory] = None
    User: Optional[SmbUser] = None


class UpdateTaskExecutionRequest(BaseModel):
    Options_1: Options = Field(..., alias='Options')
    TaskExecutionArn_1: TaskExecutionArn = Field(..., alias='TaskExecutionArn')


class AgentList(RootModel[List[AgentListEntry]]):
    root: List[AgentListEntry]


class DescribeAgentResponse(BaseModel):
    AgentArn_1: Optional[AgentArn] = Field(None, alias='AgentArn')
    CreationTime: Optional[Time] = None
    EndpointType_1: Optional[EndpointType] = Field(None, alias='EndpointType')
    LastConnectionTime: Optional[Time] = None
    Name: Optional[TagValue] = None
    PrivateLinkConfig_1: Optional[PrivateLinkConfig] = Field(
        None, alias='PrivateLinkConfig'
    )
    Status: Optional[AgentStatus] = None


class DescribeLocationEfsResponse(BaseModel):
    AccessPointArn: Optional[EfsAccessPointArn] = None
    CreationTime: Optional[Time] = None
    Ec2Config_1: Optional[Ec2Config] = Field(None, alias='Ec2Config')
    FileSystemAccessRoleArn: Optional[IamRoleArn] = None
    InTransitEncryption: Optional[EfsInTransitEncryption] = None
    LocationArn_1: Optional[LocationArn] = Field(None, alias='LocationArn')
    LocationUri_1: Optional[LocationUri] = Field(None, alias='LocationUri')


class DescribeLocationHdfsResponse(BaseModel):
    AgentArns: Optional[AgentArnList] = None
    AuthenticationType: Optional[HdfsAuthenticationType] = None
    BlockSize: Optional[HdfsBlockSize] = None
    CreationTime: Optional[Time] = None
    KerberosPrincipal_1: Optional[KerberosPrincipal] = Field(
        None, alias='KerberosPrincipal'
    )
    KmsKeyProviderUri_1: Optional[KmsKeyProviderUri] = Field(
        None, alias='KmsKeyProviderUri'
    )
    LocationArn_1: Optional[LocationArn] = Field(None, alias='LocationArn')
    LocationUri_1: Optional[LocationUri] = Field(None, alias='LocationUri')
    NameNodes: Optional[HdfsNameNodeList] = None
    QopConfiguration_1: Optional[QopConfiguration] = Field(
        None, alias='QopConfiguration'
    )
    ReplicationFactor: Optional[HdfsReplicationFactor] = None
    SimpleUser: Optional[HdfsUser] = None


class DescribeLocationNfsResponse(BaseModel):
    CreationTime: Optional[Time] = None
    LocationArn_1: Optional[LocationArn] = Field(None, alias='LocationArn')
    LocationUri_1: Optional[LocationUri] = Field(None, alias='LocationUri')
    MountOptions: Optional[NfsMountOptions] = None
    OnPremConfig_1: Optional[OnPremConfig] = Field(None, alias='OnPremConfig')


class DescribeLocationSmbResponse(BaseModel):
    AgentArns: Optional[AgentArnList] = None
    CreationTime: Optional[Time] = None
    Domain: Optional[SmbDomain] = None
    LocationArn_1: Optional[LocationArn] = Field(None, alias='LocationArn')
    LocationUri_1: Optional[LocationUri] = Field(None, alias='LocationUri')
    MountOptions: Optional[SmbMountOptions] = None
    User: Optional[SmbUser] = None


class FilterList(RootModel[List[FilterRule]]):
    root: List[FilterRule] = Field(..., max_length=1, min_length=0)


class FsxProtocolNfs(BaseModel):
    MountOptions: Optional[NfsMountOptions] = None


class FsxProtocolSmb(BaseModel):
    Domain: Optional[SmbDomain] = None
    MountOptions: Optional[SmbMountOptions] = None
    Password: SmbPassword
    User: SmbUser


class InputTagList(RootModel[List[TagListEntry]]):
    root: List[TagListEntry] = Field(..., max_length=50, min_length=0)


class ListAgentsResponse(BaseModel):
    Agents: Optional[AgentList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListLocationsRequest(BaseModel):
    Filters: Optional[LocationFilters] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListTasksRequest(BaseModel):
    Filters: Optional[TaskFilters] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class LocationList(RootModel[List[LocationListEntry]]):
    root: List[LocationListEntry]


class OutputTagList(RootModel[List[TagListEntry]]):
    root: List[TagListEntry] = Field(..., max_length=55, min_length=0)


class StartTaskExecutionRequest(BaseModel):
    Excludes: Optional[FilterList] = None
    Includes: Optional[FilterList] = None
    OverrideOptions: Optional[Options] = None
    Tags: Optional[InputTagList] = None
    TaskArn_1: TaskArn = Field(..., alias='TaskArn')


class TagResourceRequest(BaseModel):
    ResourceArn: TaggableResourceArn
    Tags: InputTagList


class TaskExecutionList(RootModel[List[TaskExecutionListEntry]]):
    root: List[TaskExecutionListEntry]


class TaskList(RootModel[List[TaskListEntry]]):
    root: List[TaskListEntry]


class UpdateTaskRequest(BaseModel):
    CloudWatchLogGroupArn: Optional[LogGroupArn] = None
    Excludes: Optional[FilterList] = None
    Includes: Optional[FilterList] = None
    Name: Optional[TagValue] = None
    Options_1: Optional[Options] = Field(None, alias='Options')
    Schedule: Optional[TaskSchedule] = None
    TaskArn_1: TaskArn = Field(..., alias='TaskArn')


class CreateAgentRequest(BaseModel):
    ActivationKey_1: ActivationKey = Field(..., alias='ActivationKey')
    AgentName: Optional[TagValue] = None
    SecurityGroupArns: Optional[PLSecurityGroupArnList] = None
    SubnetArns: Optional[PLSubnetArnList] = None
    Tags: Optional[InputTagList] = None
    VpcEndpointId_1: Optional[VpcEndpointId] = Field(None, alias='VpcEndpointId')


class CreateLocationEfsRequest(BaseModel):
    AccessPointArn: Optional[EfsAccessPointArn] = None
    Ec2Config_1: Ec2Config = Field(..., alias='Ec2Config')
    EfsFilesystemArn_1: EfsFilesystemArn = Field(..., alias='EfsFilesystemArn')
    FileSystemAccessRoleArn: Optional[IamRoleArn] = None
    InTransitEncryption: Optional[EfsInTransitEncryption] = None
    Subdirectory: Optional[EfsSubdirectory] = None
    Tags: Optional[InputTagList] = None


class CreateLocationFsxLustreRequest(BaseModel):
    FsxFilesystemArn_1: FsxFilesystemArn = Field(..., alias='FsxFilesystemArn')
    SecurityGroupArns: Ec2SecurityGroupArnList
    Subdirectory: Optional[FsxLustreSubdirectory] = None
    Tags: Optional[InputTagList] = None


class CreateLocationFsxWindowsRequest(BaseModel):
    Domain: Optional[SmbDomain] = None
    FsxFilesystemArn_1: FsxFilesystemArn = Field(..., alias='FsxFilesystemArn')
    Password: SmbPassword
    SecurityGroupArns: Ec2SecurityGroupArnList
    Subdirectory: Optional[FsxWindowsSubdirectory] = None
    Tags: Optional[InputTagList] = None
    User: SmbUser


class CreateLocationHdfsRequest(BaseModel):
    AgentArns: AgentArnList
    AuthenticationType: HdfsAuthenticationType
    BlockSize: Optional[HdfsBlockSize] = None
    KerberosKeytab: Optional[KerberosKeytabFile] = None
    KerberosKrb5Conf: Optional[KerberosKrb5ConfFile] = None
    KerberosPrincipal_1: Optional[KerberosPrincipal] = Field(
        None, alias='KerberosPrincipal'
    )
    KmsKeyProviderUri_1: Optional[KmsKeyProviderUri] = Field(
        None, alias='KmsKeyProviderUri'
    )
    NameNodes: HdfsNameNodeList
    QopConfiguration_1: Optional[QopConfiguration] = Field(
        None, alias='QopConfiguration'
    )
    ReplicationFactor: Optional[HdfsReplicationFactor] = None
    SimpleUser: Optional[HdfsUser] = None
    Subdirectory: Optional[HdfsSubdirectory] = None
    Tags: Optional[InputTagList] = None


class CreateLocationNfsRequest(BaseModel):
    MountOptions: Optional[NfsMountOptions] = None
    OnPremConfig_1: OnPremConfig = Field(..., alias='OnPremConfig')
    ServerHostname_1: ServerHostname = Field(..., alias='ServerHostname')
    Subdirectory: NfsSubdirectory
    Tags: Optional[InputTagList] = None


class CreateLocationObjectStorageRequest(BaseModel):
    AccessKey: Optional[ObjectStorageAccessKey] = None
    AgentArns: AgentArnList
    BucketName: ObjectStorageBucketName
    SecretKey: Optional[ObjectStorageSecretKey] = None
    ServerCertificate: Optional[ObjectStorageCertificate] = None
    ServerHostname_1: ServerHostname = Field(..., alias='ServerHostname')
    ServerPort: Optional[ObjectStorageServerPort] = None
    ServerProtocol: Optional[ObjectStorageServerProtocol] = None
    Subdirectory: Optional[S3Subdirectory] = None
    Tags: Optional[InputTagList] = None


class CreateLocationS3Request(BaseModel):
    AgentArns: Optional[AgentArnList] = None
    S3BucketArn_1: S3BucketArn = Field(..., alias='S3BucketArn')
    S3Config_1: S3Config = Field(..., alias='S3Config')
    S3StorageClass_1: Optional[S3StorageClass] = Field(None, alias='S3StorageClass')
    Subdirectory: Optional[S3Subdirectory] = None
    Tags: Optional[InputTagList] = None


class CreateLocationSmbRequest(BaseModel):
    AgentArns: AgentArnList
    Domain: Optional[SmbDomain] = None
    MountOptions: Optional[SmbMountOptions] = None
    Password: SmbPassword
    ServerHostname_1: ServerHostname = Field(..., alias='ServerHostname')
    Subdirectory: SmbSubdirectory
    Tags: Optional[InputTagList] = None
    User: SmbUser


class CreateTaskRequest(BaseModel):
    CloudWatchLogGroupArn: Optional[LogGroupArn] = None
    DestinationLocationArn: LocationArn
    Excludes: Optional[FilterList] = None
    Includes: Optional[FilterList] = None
    Name: Optional[TagValue] = None
    Options_1: Optional[Options] = Field(None, alias='Options')
    Schedule: Optional[TaskSchedule] = None
    SourceLocationArn: LocationArn
    Tags: Optional[InputTagList] = None


class DescribeTaskExecutionResponse(BaseModel):
    BytesCompressed: Optional[Long] = None
    BytesTransferred: Optional[Long] = None
    BytesWritten: Optional[Long] = None
    EstimatedBytesToTransfer: Optional[Long] = None
    EstimatedFilesToTransfer: Optional[Long] = None
    Excludes: Optional[FilterList] = None
    FilesTransferred: Optional[Long] = None
    Includes: Optional[FilterList] = None
    Options_1: Optional[Options] = Field(None, alias='Options')
    Result: Optional[TaskExecutionResultDetail] = None
    StartTime: Optional[Time] = None
    Status: Optional[TaskExecutionStatus] = None
    TaskExecutionArn_1: Optional[TaskExecutionArn] = Field(
        None, alias='TaskExecutionArn'
    )


class DescribeTaskResponse(BaseModel):
    CloudWatchLogGroupArn: Optional[LogGroupArn] = None
    CreationTime: Optional[Time] = None
    CurrentTaskExecutionArn: Optional[TaskExecutionArn] = None
    DestinationLocationArn: Optional[LocationArn] = None
    DestinationNetworkInterfaceArns_1: Optional[DestinationNetworkInterfaceArns] = (
        Field(None, alias='DestinationNetworkInterfaceArns')
    )
    ErrorCode: Optional[String] = None
    ErrorDetail: Optional[String] = None
    Excludes: Optional[FilterList] = None
    Includes: Optional[FilterList] = None
    Name: Optional[TagValue] = None
    Options_1: Optional[Options] = Field(None, alias='Options')
    Schedule: Optional[TaskSchedule] = None
    SourceLocationArn: Optional[LocationArn] = None
    SourceNetworkInterfaceArns_1: Optional[SourceNetworkInterfaceArns] = Field(
        None, alias='SourceNetworkInterfaceArns'
    )
    Status: Optional[TaskStatus] = None
    TaskArn_1: Optional[TaskArn] = Field(None, alias='TaskArn')


class FsxProtocol(BaseModel):
    NFS: Optional[FsxProtocolNfs] = None
    SMB: Optional[FsxProtocolSmb] = None


class ListLocationsResponse(BaseModel):
    Locations: Optional[LocationList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListTagsForResourceResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Tags: Optional[OutputTagList] = None


class ListTaskExecutionsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TaskExecutions: Optional[TaskExecutionList] = None


class ListTasksResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Tasks: Optional[TaskList] = None


class CreateLocationFsxOntapRequest(BaseModel):
    Protocol: FsxProtocol
    SecurityGroupArns: Ec2SecurityGroupArnList
    StorageVirtualMachineArn_1: StorageVirtualMachineArn = Field(
        ..., alias='StorageVirtualMachineArn'
    )
    Subdirectory: Optional[FsxOntapSubdirectory] = None
    Tags: Optional[InputTagList] = None


class CreateLocationFsxOpenZfsRequest(BaseModel):
    FsxFilesystemArn_1: FsxFilesystemArn = Field(..., alias='FsxFilesystemArn')
    Protocol: FsxProtocol
    SecurityGroupArns: Ec2SecurityGroupArnList
    Subdirectory: Optional[FsxOpenZfsSubdirectory] = None
    Tags: Optional[InputTagList] = None


class DescribeLocationFsxOntapResponse(BaseModel):
    CreationTime: Optional[Time] = None
    FsxFilesystemArn_1: Optional[FsxFilesystemArn] = Field(
        None, alias='FsxFilesystemArn'
    )
    LocationArn_1: Optional[LocationArn] = Field(None, alias='LocationArn')
    LocationUri_1: Optional[LocationUri] = Field(None, alias='LocationUri')
    Protocol: Optional[FsxProtocol] = None
    SecurityGroupArns: Optional[Ec2SecurityGroupArnList] = None
    StorageVirtualMachineArn_1: Optional[StorageVirtualMachineArn] = Field(
        None, alias='StorageVirtualMachineArn'
    )


class DescribeLocationFsxOpenZfsResponse(BaseModel):
    CreationTime: Optional[Time] = None
    LocationArn_1: Optional[LocationArn] = Field(None, alias='LocationArn')
    LocationUri_1: Optional[LocationUri] = Field(None, alias='LocationUri')
    Protocol: Optional[FsxProtocol] = None
    SecurityGroupArns: Optional[Ec2SecurityGroupArnList] = None
